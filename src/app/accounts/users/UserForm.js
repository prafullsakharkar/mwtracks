import { Button, Typography, Switch } from '@mui/material';
import NavLinkAdapter from '@/components/core/NavLinkAdapter';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, useParams } from 'react-router-dom';
import { useEffect } from 'react';
import Loading from '@/components/core/Loading';
import _ from '@/lodash';
import * as yup from 'yup';
import { Controller, useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup/dist/yup';
import Box from '@mui/system/Box';
import SvgIcon from '@/components/core/SvgIcon';
import Avatar from '@mui/material/Avatar';
import TextField from '@mui/material/TextField';
import InputAdornment from '@mui/material/InputAdornment';
import IconButton from '@mui/material/IconButton';
import Autocomplete from '@mui/material/Autocomplete/Autocomplete';
import Checkbox from '@mui/material/Checkbox/Checkbox';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import {
  addUser,
  selectUserById,
  updateUser,
} from './store/userSlice';
import diff from 'object-diff';

/**
 * Form Validation Schema
 */
const schema = yup.object().shape({
  first_name: yup.string().required('You must enter a name'),
  email: yup.string().email('You must enter a valid email').required('You must enter a email'),
});

const defaultFormState = {
  username: 'AutoGeneratedUID',
  first_name: '',
  last_name: '',
  email: '',
  is_staff: true,
  role: 'artist',
  is_active: true,
  password: 'Welcome@2023',
  re_password: 'Welcome@2023',
  avatar: null,
};

function UserForm(props) {
  const routeParams = useParams();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const user = useSelector((state) => selectUserById(state, routeParams.id)) || null;

  const { control, watch, reset, handleSubmit, formState, getValues, setValue } = useForm({
    mode: 'onChange',
    resolver: yupResolver(schema),
  });

  const { isValid, dirtyFields, errors } = formState;

  const form = watch();

  const roles = ["admin", "owner", "production", "supervisor", "artist"]

  /**
   * Form Submit
   */
  function onSubmit(data) {
    if (routeParams.id === 'new') {
      dispatch(addUser(data)).then(() => navigate("/accounts/users"));
    } else {
      const changedValues = diff(user, data)
      changedValues.id = user.id
      dispatch(updateUser(changedValues)).then(() => navigate("/accounts/users"));
    }
  }

  useEffect(() => {
    reset((routeParams.id == "new") ? defaultFormState : { ...user });
  }, [user, reset]);

  if (_.isEmpty(form)) {
    return <Loading />;
  }

  return (
    <>
      <Box
        className="relative w-full h-88 px-32 sm:px-48"
        sx={{
          backgroundColor: 'background.default',
        }}
      >
        {!form.avatar && (<Typography className="flex justify-center mt-24 text-3xl font-bold truncate">Create New User</Typography>)}
      </Box>
      <div className="relative flex flex-col flex-auto items-center px-24 sm:px-48">
        {form?.avatar && (<div className="w-full">
          <div className="flex flex-auto items-end -mt-64">
            <Avatar
              sx={{
                borderWidth: 4,
                borderStyle: 'solid',
                borderColor: 'background.paper',
                backgroundColor: 'background.default',
                color: 'text.secondary',
              }}
              className="w-128 h-128 text-64 font-bold"
              src={form?.avatar}
              alt={form?.first_name}
            >
              {form?.first_name?.charAt(0)}
            </Avatar>
            <div className="flex items-center ml-auto mb-4">
              <Typography className="mt-12 text-2xl font-bold truncate">{form?.username}</Typography>
            </div>
          </div>
        </div>
        )}

        <Controller
          control={control}
          name="first_name"
          render={({ field }) => (
            <TextField
              className="mt-24"
              {...field}
              label="First Name"
              placeholder="First Name"
              id="first_name"
              error={!!errors.first_name}
              helperText={errors?.first_name?.message}
              variant="outlined"
              required
              fullWidth
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SvgIcon size={20}>heroicons-solid:user-circle</SvgIcon>
                  </InputAdornment>
                ),
              }}
            />
          )}
        />
        <Controller
          control={control}
          name="last_name"
          render={({ field }) => (
            <TextField
              className="mt-24"
              {...field}
              label="Last Name"
              placeholder="Last Name"
              id="last_name"
              error={!!errors.last_name}
              helperText={errors?.last_name?.message}
              variant="outlined"
              fullWidth
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SvgIcon size={20}>heroicons-solid:user-circle</SvgIcon>
                  </InputAdornment>
                ),
              }}
            />
          )}
        />
        <Controller
          control={control}
          name="email"
          render={({ field }) => (
            <TextField
              className="mt-24"
              {...field}
              label="Email"
              placeholder="Email"
              id="email"
              error={!!errors.email}
              helperText={errors?.email?.message}
              variant="outlined"
              required
              fullWidth
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SvgIcon size={20}>heroicons-solid:mail</SvgIcon>
                  </InputAdornment>
                ),
              }}
            />
          )}
        />

        <Controller
          control={control}
          name="role"
          render={({ field: { onChange, value } }) => (
            <Autocomplete
              id="role"
              className="mt-24"
              options={roles}
              value={form.role}
              disableClearable
              fullWidth
              onChange={(event, newValue) => {
                setValue('role', newValue)
              }}
              renderInput={(params) => <TextField {...params} label="Roles" placeholder="Roles" />}
            />
          )}
        />

        <div className="mt-24">
          <Typography>Is Active
            <Controller
              control={control}
              name="is_active"
              label="User Active"
              labelPlacement="start"
              render={({ field }) => (
                <Switch checked={form.is_active} {...field} name="is_active" />
              )}
            />
          </Typography>
        </div>


      </div>

      <Box
        className="flex items-center mt-40 py-14 pr-16 pl-4 sm:pr-48 sm:pl-36 border-t"
        sx={{ backgroundColor: 'background.default' }}
      >
        <Button className="ml-auto" component={NavLinkAdapter} to={-1}>
          Cancel
        </Button>
        <Button
          className="ml-8"
          variant="contained"
          color="secondary"
          disabled={_.isEmpty(dirtyFields) || !isValid}
          onClick={handleSubmit(onSubmit)}
        >
          Save
        </Button>
      </Box>
    </>
  );
}

export default UserForm;
